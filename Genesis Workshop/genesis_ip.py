# -*- coding: utf-8 -*-
"""Genesis_IP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QU9IzaE3BTH8k3Tk_4rX-TFaOJZF1zdB
"""

import cv2
# from google.colab.patches import cv2_imshow #only for colab
import numpy as np
from skimage.morphology import skeletonize
import matplotlib.pyplot as plt
import numpy as np
import math
import pandas as pd
'''
filename = "Maze.jpg"

#Reading the maze file
img = cv2.imread(filename)  
#cv2.imshow("Original" , img)
#print('\n')

#Changing orieantation according to the configuation (trial and error)
#Fliping the image
#Use Flip code 1 to flip on vertical axis and 0 to flip horizontal axis
#Fliping because of orietation (where to flip is the question)
#img = cv2.flip(img,1) 
#cv2.imshow('flipped',img)
#print('\n')

#img =cv2.rotate(img,cv2.ROTATE_90_COUNTERCLOCKWISE)
#cv2_imshow(img)

#Binary conversion

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # converting maze image to grayscale image
cv2.imshow("gray", gray)

#  # Inverting thresholding will give us a binary image with a white wall and a black background.

#Theshold value for single channel, exactly 1/2 of the intensity
ret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)
cv2.imshow("thresh", thresh)

# # # Contours - only binary images, to be detcted in white and background in balck
# Finding all contours in inverted thresholded image
# cv2.RETR_EXTERNAL: Retrieves only the external contours, or boundaries 
# of the objects in the image. It does not retrieve contours within contours.

contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)  


width = img.shape[1]
height = img.shape[0]

# draws the first contour in the thresholded image
pic = cv2.drawContours(thresh, contours, 0, (255, 255, 255), 5)  
cv2.imshow("pic", pic)

print(len(contours[0]))

# hide the other larger contour
cd = cv2.drawContours(pic, contours, 1, (0,0,0) , 5) 
cv2.imshow("cd", cd)

ret, thresh = cv2.threshold(cd, 240, 255, cv2.THRESH_BINARY)
# #cv2.imwrite(filename+'/4. Threshold2.jpg', thresh)
cv2.imshow("thresh" , thresh)

#By trial and error
ke = 19
kernel = np.ones((ke, ke), np.uint8)

# # # Dilate
dilation = cv2.dilate(thresh, kernel, iterations=2)
cv2.imshow("dilation" , dilation)

# # # Erosion

erosion = cv2.erode(dilation, kernel, iterations=1)
cv2.imshow("erosion" , erosion)

# # # Find differences between two images
diff = cv2.absdiff(dilation, erosion)

#diff = cv2.absdiff(dilation, erosion)
# # print(diff.shape)
# # print(diff)

cv2.imshow("diff" , diff)


kernel1 = np.ones((5, 5), np.uint8)
img_erosion = cv2.erode(diff, kernel1, iterations=2)

# #print(img_erosion.shape)
#final = cv2.cvtColor(img_erosion, cv2.COLOR_BGR2GRAY)
#ret, thresh1 = cv2.threshold(final, 120, 255, cv2.THRESH_BINARY)
#ske = skeletonize(thresh1/255)

cv2.imshow("img_erosion" , img_erosion)
ske = skeletonize(img_erosion/255)
#cv2.imshow("skeleton",ske)

plt.imshow(ske)
#draws the image on a 2d graph
plt.show()
# starts an event loop, looks for all currently active figure objects, and opens one or more interactive windows that display your figure or figures.


points = []
points_arg = []
for i in range(img.shape[0]): #rows = height
    for j in range(img.shape[1]): #column = width

        #points=np.argwhere(ske[i][j] == 'True')
        if ske[i][j] == True:
            #print(i,j)
            points.append(ske[j][i])
            points_arg.append((j,i))

X=[]
Y=[]

for i in range(len(points_arg)):
    img = cv2.circle(img ,(points_arg[i][0],points_arg[i][1]),1,(255,0,0),-1)
    X.append(points_arg[i][0])
    Y.append(points_arg[i][1])

cv2.imshow("plottted_image",img)
#plt.scatter(X,Y)
#plt.show()

ord_x = []
ord_y = []

#
x0 = X[0]
y0 = Y[0]
ord_x.append(x0)
ord_y.append(y0)

#
X.pop(0)
Y.pop(0)

# #x1=x0
# #y1=y0
#
#
print(img.shape)

for i in range(len(X)):
    min_dist = 10# why 10?
    j_min = 0
    for j in range(len(X)):
        x1 = X[j]  # first element after removing start elem of array
        y1 = Y[j]

        dist = (x1 - x0)**2 + (y1 - y0)**2
        # print(dist,end = ' ')
        if dist < min_dist:
            min_dist = dist
            x_next = x1
            y_next = y1
            j_min = j

    ord_x.append(x_next)
    ord_y.append(y_next)
    X.pop(j_min)
    Y.pop(j_min)
    x0 = x_next
    y0 = y_next

plt.scatter(ord_x, ord_y)
plt.show()

l_x = 15.7
ip_x= img.shape[1] #Columns = width
l_y = 16.8
ip_y = img.shape[0] #Rows = height
l_5 = 7 #in cms
servo_to_centre = 13 #in cms


c_x = l_x/ip_x
c_y = l_y/ip_y

# ipx=img.shape[0]
# ipy=img.shape[1]

t_r=[[0,-c_y,0,(l_5/2 + (c_y*ip_y/2))],
     [-c_x,0,0,(servo_to_centre + (c_x*ip_x/2))],
     [0,0,-1,0],
     [0,0,0,1]]


#
points_x=[]
points_y=[]

for i in range(len(ord_x)):
    points_x.append(ord_x[i])
    points_y.append(ord_y[i])
#
img_x=[]
img_y=[]
# #

p= np.vstack
p= np.vstack((points_x,points_y,np.zeros((1,len(points_x))),np.ones((1,len(points_x)))))

# #
# # #print(p)
# #

mat=np.dot(t_r,p)
#print(mat,mat[0])

x = mat[0]
y = mat[1]

print(x)
print(y)
plt.scatter(x,y)
plt.show()

la = 14  # length of arm A in cm
lb = 20  # length of arm B in cm
lc = 6.7  # distance between
N_Points = len(x)
# #
# #
# #
theta_1 = []
theta_4 = []
for i in range(0, N_Points):
    xp = x[i]
    yp = y[i]
    # print(x_p,y_p)
    E1 = -2 * la * xp;
    E4 = 2 * la * (-xp + lc);

    F1 = -2 * la * yp;
    F4 = -2 * la * yp;

    G1 = la ** 2 - lb ** 2 + xp ** 2 + yp ** 2;
    G4 = lc ** 2 + la ** 2 - lb ** 2 + xp ** 2 + yp ** 2 - 2 * lc * xp;
    print(i, x[i] , y[i], N_Points)
    temp1 = math.sqrt(E1 ** 2 + F1 ** 2 - G1 ** 2);
    temp4 = math.sqrt(E4 ** 2 + F4 ** 2 - G4 ** 2);

    m1 = G1 - E1;
    m4 = G4 - E4;
#
    theta1_pos = 2 * math.atan((-F1 + temp1) / m1);
    theta1_neg = 2 * math.atan((-F1 - temp1) / m1);

    theta4_pos = 2 * math.atan((-F4 + temp4) / m4);
    theta4_neg = 2 * math.atan((-F4 - temp4) / m4);

    theta1_pos = math.degrees(theta1_pos);
    theta1_neg = math.degrees(theta1_neg);
    theta4_pos = math.degrees(theta4_pos);
    theta4_neg = math.degrees(theta4_neg);

    theta_1.append(theta1_pos)
    theta_4.append(theta4_neg)


theta_1_new = []
theta_4_new = []
# 
for i in range(0, N_Points):
    if theta_1[i] < 0:
        temp = 1 * (theta_1[i] + 270);

    if theta_1[i] > 0:
        temp = theta_1[i] - 90;

    theta_1_new.append(temp)
    theta_4_new.append(theta_4[i] + 90)
#
# # DF1 = pd.DataFrame(theta_1_new)
# # DF1.to_csv("theta1.csv")
# # DF4 = pd.DataFrame(theta_4_new)
# # DF4.to_csv("theta4.csv")
#
# # # # save the dataframe as a csv file
# # #
# # #
# print(theta_1_new)
# # # # #
# print(theta_4_new)
#
# # print(len(theta_1_new))
# theta_1_new = [theta_1_new[i] for i in range(len(theta_1_new)) if i % 20 == 0]
# theta_4_new = [theta_4_new[i] for i in range(len(theta_4_new)) if i % 20 == 0]
#
# print(theta_1_new)
# print(theta_4_new)
# print(len(theta_1_new))
# print(len(theta_4_new))
#
# DF1 = pd.DataFrame(theta_1_new)
# DF1.to_csv("theta1.csv")
# DF4 = pd.DataFrame(theta_4_new)
# DF4.to_csv("theta4.csv")
#
#
# # # c = np.savetxt('theta1.txt', np.reshape(theta_1_new,(1,len(theta_1_new))), delimiter =', ')
# # # d = np.savetxt('theta4.txt', theta_4_new, delimiter =', ')
import serial
import time

#theta_4_new = pd.read_csv("theta4.csv").columns
#theta_1_new = pd.read_csv("theta1.csv").columns
#theta_1_new = [110.6977407074333, 104.14641604006187, 99.02649153587203, 92.51378543120637, 93.03453009793142, 97.20815109318505, 89.95259889487986, 85.67966695235154, 82.9538154571944, 80.43379646139456, 86.41510854091123, 92.51533369950255, 98.51106677053312, 104.2889347333442, 99.86037661434324, 94.4210616824356, 88.9489924366749, 85.75820743217326, 81.92614232877159, 79.82271200819775, 82.50030575505338, 81.27133396432316, 75.73001146354068, 70.24705745252908, 65.97947141624772, 64.54538819857422, 61.25802571317095, 59.77014749902952, 60.87327694390285, 61.87608566365432, 66.966320376709, 72.80371335016932, 75.79698503598524, 77.72005190383277, 79.7055593553489, 72.4901654729417, 65.20860614434707, 58.44984013420148, 52.17717335144485, 46.34561394818863, 40.90809997534376, 35.81896442015895, 34.50856812808554, 35.27422574089864, 35.80032246744446, 36.108913888474746, 36.21995873704222, 36.151187037546066, 35.91810204357246, 39.24492585871096, 40.597185496586974, 40.887499565891005, 45.08825262539477, 44.86941140291603, 44.28289517580842, 42.65113986446087, 38.72443820389813, 35.340779251942976, 34.76400359481994, 34.06030469666989, 33.236663839217854, 32.29842701903854, 31.24936621189069, 30.09170069911346, 28.82606927598107, 27.4514407568777, 27.947850939130973, 30.983017765105174, 32.11093751004961, 29.341101025021203, 26.36686869870573, 24.026280273334734, 25.255926013083894, 28.16892644943485, 31.0403897738596, 33.54364014444771, 35.354566444082664, 38.14713379535368, 37.47259508376102, 35.56092567945905, 37.751816360922874, 40.46593900337504, 43.12593461407144, 45.549415694912426, 47.67788814003808, 49.7521889573793, 51.77927516474, 53.765231110024445, 55.715482264666264, 57.634968199927755, 59.52829016457463, 61.39984549553088, 63.253959882025725, 65.09502905197374, 61.01941814971366, 56.8645718703612, 52.74065906285574, 50.93480715785836, 54.5492156476578, 58.498747985458806, 57.4617859635315, 55.79090697595768, 54.07827307937811, 52.32218893175562, 50.520266924107716, 48.669392194819125, 46.76564923155814, 44.80420418127795, 42.257890546654295, 41.182465672949064, 43.07780599938485, 42.354615333123604, 39.33783720571796, 36.29102840961896, 33.21852690184846, 32.15549215357137, 33.51617604378005, 34.776776954308275, 37.657198842035044, 37.55356058354266, 36.16341708245416, 38.782948464305264, 41.914544509919494, 45.02043495607461, 47.18093166236247, 48.862196454737585, 50.484374466676115, 52.0483074997816, 53.55380297883062, 50.13189066258764, 46.38975813064678, 42.67207086328435, 41.05913745633151, 44.35605193029238, 47.8862808530173, 46.84747370076229, 45.37637880200177, 43.26823656348944, 41.50206816739254, 42.89715708937817, 41.89827274190131, 38.44144078526344, 36.94392766711165, 37.90069798411193, 38.74645560054262, 41.90525396183682, 45.75161563288967, 47.81469834510898, 48.73509728731008, 49.542002080884515, 50.22271067632343, 50.761290287303126, 46.776603031053355, 42.14390818481246, 40.93606234486313, 40.6511463294479, 40.631474337553385, 45.35512773202504, 45.63396878999367, 47.413612856339256, 51.25800468524099, 51.34386808558813, 54.15467461258291, 60.185458766297415, 66.59691561970348, 69.56386141939979, 64.46061687599573, 58.56936436443914, 56.28236124941574, 55.71722570221655, 55.002524763635705, 54.15867430939079, 53.20161056066274, 56.67455233674107, 61.05239029163175, 65.46868182038679, 68.2996820673483, 70.13024519751349, 75.01918946460918, 73.59045755033796, 71.44832351752646, 69.34438905633715, 67.26595773109938, 65.20259725586726, 63.878175041576384, 67.35807371108993, 70.76582261315119, 74.21418431561335, 76.09261284736675, 72.58017161565124, 69.91277332882021, 73.17803901275153, 76.95543615125854, 80.62599930513602, 81.45111346051706, 78.55876033675256, 75.76317520510881, 73.0418594935621, 73.79838829873864, 76.51064319145055, 79.09013082152694, 81.52624224248234, 83.80990923196146, 85.93377069348736, 85.30991631090322, 82.06906426016386, 78.89759068366769, 75.77763511539837, 72.6925274560464, 70.21190651318162, 68.43513626749885, 66.54064916246975, 68.48665035852758, 70.81853443865481, 72.70055514920145, 75.82961046077384, 78.90987277004271, 81.68714689319424, 79.56955782337738, 77.30683695046969, 74.90640243682648, 72.37697599500015, 69.72841165131112, 67.09761431600029, 69.06499051119161, 71.17598591441981, 68.01843068619951, 64.77451882631644, 61.46003849544849, 59.226215386713534, 57.144649650173704, 55.04129593934212, 52.9092989556014, 51.36864890271232, 54.054476170202605, 55.81352063186284, 53.00923962160405, 50.45239012574254, 47.85677118016076, 45.575421999231025]
#theta_4_new = [79.63269442758137, 84.3879038440459, 88.32375566261244, 86.17454997195317, 80.21994007738664, 74.89399159626925, 65.76561970472105, 70.13151934664695, 75.91343903660824, 80.7203550885993, 86.9223427768232, 93.01739283243977, 99.12404989149842, 105.15729665215895, 106.96711677598239, 101.54321817299495, 96.55418103421195, 99.27925732270899, 100.43457318328726, 95.87361440597273, 92.81709232253871, 88.30532618763768, 82.97703133712065, 77.88050542725493, 76.16329992313989, 80.57575297654603, 81.22639587430655, 76.26624330780918, 71.51016541351675, 66.12052034546485, 68.49417735726433, 73.80147586393669, 70.88541799382745, 64.48471571706936, 56.21533916102292, 47.67977362398244, 40.887040559994986, 35.485082182591334, 31.46293448297186, 28.645564210950177, 26.796231919752543, 25.690386057460074, 31.13240616849125, 38.97328443624501, 45.886939520614, 52.06878689435446, 57.664040134314725, 62.783491976033204, 67.51342389385982, 70.25317290358814, 67.1596504783593, 62.21575925098148, 64.18337955499194, 69.25530913379573, 73.77695460933703, 76.93243903457557, 74.57022496809084, 73.6084874267453, 77.65775470662457, 81.50155682689847, 85.17459043118424, 88.70621805125576, 92.12168932332973, 95.44310050174579, 98.6901694591023, 101.88088406962686, 104.4844820461481, 106.15631951908739, 108.81910938619805, 109.20693948834959, 107.59483723889585, 108.78409979005293, 110.9930495489971, 112.57102364691752, 114.26663075759973, 113.78500874381714, 110.85822887528045, 110.68793712665445, 113.7352051895329, 116.59265991674468, 118.7913599077418, 120.85453222893574, 123.01459355318752, 121.72371509830097, 119.13183849513713, 116.54852506567485, 113.96151029975766, 111.3581617595818, 108.72499190406526, 106.04710233759334, 103.3075022345677, 100.48622213780098, 97.55910508355143, 94.49608690141227, 90.68414025300461, 87.22157337113127, 83.97620347354308, 86.50928788859571, 89.75131496087067, 92.97800446951877, 96.6299413302205, 99.64981310873283, 102.56598098905873, 105.40175421306769, 108.17676955564168, 110.90804375895527, 113.61077220654819, 116.29896801250408, 117.92329517239386, 115.17378501723034, 112.39943053759569, 109.77117843030089, 107.61662682405537, 105.58667089139654, 103.68699125392786, 100.88985926989659, 97.71602941282374, 94.47106602609304, 94.38932037515846, 97.74971225236123, 100.89169418730879, 103.17771181327501, 105.329978634257, 107.61230770581656, 105.93140123015232, 103.04486638385893, 100.08802274327581, 97.03979380177117, 93.87517266156465, 90.78921576861185, 88.06756451455153, 85.54785534911055, 88.10717541391077, 90.71484047954786, 93.4364722466336, 96.90170134729654, 99.99627961232181, 102.39608842816568, 99.320641965779, 96.17370077070915, 93.22874702400877, 91.01388783575155, 87.8611723430945, 84.27992429329151, 80.53034801700272, 80.71573768300007, 83.24269495657272, 81.51866924393734, 77.49499310440336, 73.15555646361364, 68.41649378697372, 63.16312692956125, 59.319570277603376, 56.55145895047323, 50.44404571188133, 43.59481800827368, 35.89934825967948, 39.69411375774837, 47.589589073884234, 53.47017660549552, 53.94095036737125, 46.4922217516203, 42.70111834560185, 47.15700301589741, 52.57662919143766, 60.653004907143625, 59.36310588801801, 54.5031777554457, 57.915081956067745, 64.06959448663233, 69.43776744128124, 74.2273770947459, 78.577792870549, 82.26591267321172, 85.86940453615297, 89.70198512299753, 88.68611021292658, 85.01000762264991, 87.88584622234286, 92.01710381381453, 95.17844033093708, 98.15634433131038, 100.99316231389268, 103.72112483254926, 106.59619342165527, 109.93351704172163, 113.35773272809946, 116.74799378384954, 114.35149292370724, 110.68531516546662, 106.82742652731915, 106.46773654392024, 110.31906903124593, 114.2274786423776, 117.70552779793272, 119.55491194957119, 121.4246649728306, 123.31895560963163, 126.20887469301087, 129.5060306062221, 132.82907300498857, 136.16890261612937, 139.5178668958957, 142.86980276580627, 145.53355081585218, 146.79914645031175, 148.16529811183818, 149.63331854085038, 151.20629920372693, 149.64735516846542, 146.72031805769174, 143.83093227469055, 141.5546784973737, 144.09336970173104, 147.0808430766432, 145.64880674399112, 144.1617221292675, 142.5100361092698, 139.26431163901682, 136.03253455310409, 132.82089216667447, 129.63682508672463, 126.48894933762107, 123.28380965518035, 120.85348139333564, 118.56413203107844, 115.24919808441938, 112.0047200682309, 108.84648361956576, 111.23044936654327, 113.73712737985183, 116.22432685460764, 118.70409148894336, 121.31459908493939, 123.86672244210985, 126.8029342937215, 127.51466300060605, 125.01676902945167, 124.4410615216025, 126.97686108653376]
N_Points = len(theta_4_new)
print(N_Points)
print("1")
# print(theta_4_new)
arm = serial.Serial('COM3',9600)
# arm.write("163.13 145.19\n".encode('utf-8'))
# time.sleep(0.2)
# arm.write("67.67 156.49\n".encode('utf-8'))

print("Connected")
for i in range(0,N_Points):
  s = str(round(float(theta_1_new[i]),2))+" "+str(round(float(theta_4_new[i]),2))+"\n"
  print(s+" "+str(i))
  arm.write(s.encode('utf-8'))
  time.sleep(0.2)

#
#
'''

cv2.waitKey(0)
cv2.destroyAllWindows()
